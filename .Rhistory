setwd("~/Coursera/Reproducible Research")
source('~/Coursera/Reproducible Research/PA1_template.R')
View(data)
View(data)
View(data)
data$date <- as.Date(data$Date)
data$date <- as.Date(data$date)
summary(data)
aggdata <-aggregate(data$steps, by=list(data$date),"sum", na.rm=TRUE)
colnames(aggdata)<-c("Date","Number of steps")
hist(aggdata$steps)
hist(aggdata$steps,main = paste("Histogram of Number of Steps per Day",
xlab = "Number of Steps per Day" ))
hist(aggdata$steps,main = "Histogram of Number of Steps per Day",
xlab = "Number of Steps per Day" ))
hist(aggdata$steps,main = "Histogram of Number of Steps per Day",
xlab = "Number of Steps per Day" )
print(aggdata)
mu<-mean(aggdata$steps)
hist(aggdata$steps,main = "Histogram of Number of Steps per Day",
xlab = "Number of Steps per Day" )
data <- read.csv("activity.csv")
data$date <- as.Date(data$date)
summary(data)
aggdata <-aggregate(data$steps, by=list(data$date),"sum", na.rm=TRUE)
colnames(aggdata)<-c("date","steps")
hist(aggdata$steps,main = "Histogram of Number of Steps per Day",
xlab = "Number of Steps per Day" )
mu<-mean(aggdata$steps,na.rm=TRUE)
med<-median(aggdata$steps,na.rm=TRUE)
print(mu)
print(med)
mean(aggdata$steps,na.rm=TRUE)
median(aggdata$steps,na.rm=TRUE)
print(mu<-mean(aggdata$steps,na.rm=TRUE))
interdata <- aggregate(data$steps, by=list(data$interval),"mean",na.rm=TRUE)
colnames(interdata)<-c("Interval","Steps")
maxinter <- subset(interdata, Steps == max(interdata$Steps))
plot(interdata, type = "l")
print(maxinter)
nadata <- subset(data, is.na(steps))
nrow(nadata)
newdata <- data
indx <- which(is.na(newdata[, 1])==TRUE)
for(i in indx) newdata$steps[i]<- interdata$Steps[interdata$Interval==newdata$interval[i]]
newaggdata <- aggregate(newdata$steps, by=list(newdata$date), "sum", na.rm=TRUE)
colnames(newaggdata)<-c("Date","Total_Steps")
hist(newaggdata$Total_Steps)
print(mu<-mean(newaggdata$Total_Steps))
print(med<-median(newaggdata$Total_Steps))
hist(aggdata$steps,xlab = "Number of Steps per Day" )
weekday_function <- function (x= date())
{
if (weekdays(x)=="Sunday" || weekdays(x)=="Saturday")
return("weekend")
else
return("weekday")
}
for (i in 1:nrow(newdata)) newdata$wkday[i] <- weekday_function(as.Date(newdata$date[i]))
newdata$wkday <- as.factor(newdata$wkday)
summary(newdata)
new_interdata <- aggregate(newdata$steps, by=list(newdata$interval),"mean",na.rm=TRUE)
colnames(new_interdata)<-c("Interval","Steps","wkday")
plot(new_interdata$wkday,new_interdata, type = "l")
summary(new_interdata)
new_interdata <- aggregate(split(newdata$steps,newdata$wwkday), by=list(newdata$interval),"mean",na.rm=TRUE))
new_interdata <- aggregate(split(newdata$steps,newdata$wwkday), by=list(newdata$interval),"mean",na.rm=TRUE)
new_interdata <- aggregate(split(newdata,newdata$wwkday), by=list(newdata$interval),"mean",na.rm=TRUE)
new_interdata <- aggregate(split(newdata,newdata$wkday), by=list(newdata$interval),"mean",na.rm=TRUE)
do.call(rbind,lapply(split(newdata,newdata$wkday),function (chunk)
aggregate(chunk$steps, by=list(chunk$interval),
"mean",na.rm=TRUE))
)
new_interdata <- (rbind,lapply(split(newdata,newdata$wkday),function (chunk)
aggregate(chunk$steps, by=list(chunk$interval),
"mean",na.rm=TRUE)))
new_interdata <- rbind(lapply(split(newdata,newdata$wkday),function (chunk)
aggregate(chunk$steps, by=list(chunk$interval),
"mean",na.rm=TRUE)))
print(new_interdata)
new_interdata <- lapply(split(newdata,newdata$wkday),function (chunk)
aggregate(chunk$steps, by=list(chunk$interval),
"mean",na.rm=TRUE))
print(new_interdata)
new_interdata <- do.call(rbind,lapply(split(newdata,newdata$wkday),function (chunk)
aggregate(chunk$steps, by=list(chunk$interval),
"mean",na.rm=TRUE)))
print(new_interdata)
summary(new_interdata)
plot(new_interdata,type="l")
plot(lapply(split(newdata,newdata$wkday),function (chunk)
aggregate(chunk$steps, by=list(chunk$interval),
"mean",na.rm=TRUE)),type="l")
rep(1:288,"weekday")
x<-rep(1:288,"weekday")
x
x<- list(1:10,"weekday")
x
x<-split(newdata,newdata$wkday)
x
y<-lapply(x,function(chunk) aggregate(chunk$steps, by=list(chunk$interval),
)
y<-lapply(x,function(chunk) aggregate(chunk$steps, by=list(chunk$interval),
"mean",na.rm=TRUE))
y<-lapply(x,function(chunk) aggregate(chunk$steps, by=list(chunk$interval),
"mean",na.rm=TRUE))
y
x <- isplit(newdata,newdata$wkday)
head(newinterval_data,20)
)
wkdays <- split(newdata,newdata$wkday)
head(wkdays,20)
tail(wkdays,20)
x <- split(newdata,newdata$wkday)
length(x)
x <- split(newdata,newdata$wkday)
length(x)
for (i in 1:length(x)) {
tmpdata <- aggregate(x[[i]]$steps, by=list(x[[i]]$interval),
"mean",na.rm=TRUE))
sname <- names(x)[i]
plot(tmpdata,
main = paste(sname),
ylim = c(0,40), xlab = "Interval",
ylab = "Average number of steps")
grid()
}
x <- split(newdata,newdata$wkday)
length(x)
for (i in 1:length(x)) {
tmpdata <- aggregate(x[[i]]$steps, by=list(x[[i]]$interval),
"mean",na.rm=TRUE)
sname <- names(x)[i]
plot(tmpdata,
main = sname,
xlab = "Interval",
ylab = "Average number of steps")
grid()
}
x <- split(newdata,newdata$wkday)
length(x)
for (i in 1:length(x)) {
tmpdata <- aggregate(x[[i]]$steps, by=list(x[[i]]$interval),
"mean",na.rm=TRUE)
sname <- names(x)[i]
plot(tmpdata,
main = sname,
xlab = "Interval",
ylab = "Average number of steps",
type = "l")
grid()
}
x <- split(newdata,newdata$wkday)
length(x)
par(mfrow=c(1,2))
for (i in 1:length(x)) {
tmpdata <- aggregate(x[[i]]$steps, by=list(x[[i]]$interval),
"mean",na.rm=TRUE)
sname <- names(x)[i]
plot(tmpdata,
main = sname,
xlab = "Interval",
ylab = "Average number of steps",
type = "l")
grid()
}
x <- split(newdata,newdata$wkday)
length(x)
par(mfrow=c(2,1))
for (i in 1:length(x)) {
tmpdata <- aggregate(x[[i]]$steps, by=list(x[[i]]$interval),
"mean",na.rm=TRUE)
sname <- names(x)[i]
plot(tmpdata,
main = sname,
xlab = "Interval",
ylab = "Average number of steps",
type = "l")
grid()
}
x <- split(newdata,newdata$wkday)
length(x)
par(mfrow=c(2,2))
for (i in 1:length(x)) {
tmpdata <- aggregate(x[[i]]$steps, by=list(x[[i]]$interval),
"mean",na.rm=TRUE)
sname <- names(x)[i]
plot(tmpdata,
main = sname,
xlab = "Interval",
ylab = "Average number of steps",
type = "l")
grid()
}
